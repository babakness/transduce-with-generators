/// <reference types="Cypress" />

context('Async Functions', () => {
  beforeEach(() => {
    cy.visit('http://localhost:1234')
  })
  it('increments debounce right away but waits before increment trailing debounce', () => {
    cy.get('#trigger')
      .click()
      .get('#debounce-counter')
      .contains('1')
      .get('#debounce-trailing-counter')
      .contains('0')
      .wait( 300 )
      .contains('1')
  })

  it('debounce ignores all other clicks under 300ms, resets timer each invalid click', () => {
    cy.get('#trigger')
        .click()
      .get('#debounce-counter')
        .contains('1')
      .get('#trigger')
        .click()
      .get('#debounce-counter')
        .contains('1')
      .wait(200)
      .get('#trigger') 
        .click()
      .get('#debounce-counter')
        .contains('1')      
      .wait(200)
      .get('#trigger')
        .click()
      .get('#debounce-counter')
        .contains('1')
      .wait(300)
      .get('#trigger')
        .click()
      .get('#debounce-counter')
        .contains('2')
  })

  it('debounce trailing waits for 300ms pause before incrementing after last click', () => {
    cy.get('#trigger')
        .click()
      .get('#debounce-trailing-counter')
        .contains('0')
      .get('#trigger')
        .click()
      .get('#debounce-trailing-counter')
        .contains('0')
      .wait(200)
      .get('#trigger') 
        .click()
      .get('#debounce-trailing-counter')
        .contains('0')      
      .wait(200)
      .get('#trigger')
        .click()
      .get('#debounce-trailing-counter')
        .contains('0')
      .wait(300)
      .get('#debounce-trailing-counter')
        .contains('1')
      .wait(400)
        .contains('1')
      .get('#trigger')
        .click()
      .wait(300)
      .get('#debounce-trailing-counter')
        .contains('2')
  })

  it('swaps adjacent characters',() => {
    cy.get('#shuffle-input')
        .type('1234')
      .get('#shuffle-output')
        .contains('2143')
  })
})
